name: Build release artifacts
on:
  release:
    types:
      - published
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macOS-10.15
            name: macOS x86_64
            arch: x86_64
            toolchain: default.cmake

          - os: windows-latest
            name: Windows x86_64
            arch: x86_64

          - os: ubuntu-latest
            container: ubuntu:18.04
            name: Linux x86_64
            install: libsystemd-dev
            toolchain: default.cmake
            arch: x86_64

          - os: ubuntu-latest
            container: ubuntu:18.04
            name: Linux arm
            install: crossbuild-essential-armhf libsystemd-dev
            toolchain: Linux-arm.cmake
            cmake_opts: -DCMAKE_BUILD_TYPE=Release
            arch: arm

          - os: ubuntu-latest
            container: ubuntu:18.04
            name: Linux arm64
            install: crossbuild-essential-arm64 libsystemd-dev
            toolchain: Linux-arm64.cmake
            cmake_opts: -DCMAKE_BUILD_TYPE=Release
            arch: arm64

    steps:
    - name: checkout workspace
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: make build dir
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: install toolchain
      if: ${{ matrix.install != null }}
      run: |
        sudo apt -y update
        sudo apt -y install ${{ matrix.install }}

    - name: configure cmake
      env:
        TOOLCHAIN: ${{ matrix.toolchain && format('{0}/toolchains/{1}', github.workspace, matrix.toolchain) || '' }}
      run: cmake ${{matrix.cmake_opts}} -DCMAKE_TOOLCHAIN_FILE="${TOOLCHAIN}" -S ${{ github.workspace }} -B ${{github.workspace}}/build

    - name: build ziti-edge-tunnel bundle target
      run: cmake --build ${{github.workspace}}/build --target bundle --verbose

    - name: list bundle artifacts
      run: ls -R
      working-directory: ${{ github.workspace }}/build/bundle/

    - name: list program artifacts
      run: ls -R
      working-directory: ${{ github.workspace }}/build/programs/ziti-edge-tunnel/

    - name: upload bundle artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-${{ matrix.arch }}
        path: |
          ./build/bundle/ziti-edge-tunnel-*.zip
        if-no-files-found: error

  release:
    name: Download Release Artifacts
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: ${{ runner.workspace }}/downloads/

    - name: List Release Artifacts
      run: ls -horRAS ${{runner.workspace}}/downloads/

    - name: Release
      id: get_release
      uses: softprops/action-gh-release@v1
      with:
        # name: defaults to tag name
        # tag_name: defaults to github.ref
        # token: defaults to github.token
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
        files: |
          ${{ runner.workspace }}/downloads/Linux-x86_64/ziti-edge-tunnel-Linux_x86_64.zip
          ${{ runner.workspace }}/downloads/Linux-arm/ziti-edge-tunnel-Linux_arm.zip
          ${{ runner.workspace }}/downloads/macOS-x86_64/ziti-edge-tunnel-Darwin_x86_64.zip

    # These final two steps are only necessary because we prefer a different
    # release artifact name than is created by CMake, and so we could change
    # the CMake configuration or add an inline (shell) run step to manipulate
    # the filenames. The pre-release build doesn't rename the artifacts.
    - name: upload Linux ARM64 with different name
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ runner.workspace }}/downloads/Linux-arm64/ziti-edge-tunnel-Linux_aarch64.zip
        asset_name: ziti-edge-tunnel-Linux_arm64.zip
        asset_content_type: application/octet-stream

    - name: upload Windows with different name
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ runner.workspace }}/downloads/Windows-x86_64/ziti-edge-tunnel-Windows_AMD64.zip
        asset_name: ziti-edge-tunnel-Windows_x86_64.zip
        asset_content_type: application/octet-stream