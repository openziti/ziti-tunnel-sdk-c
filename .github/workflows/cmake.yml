name: CI build

on:
  push:
    branches: [ '**' ]

  pull_request:
    branches: [ main ]

  workflow_call:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    env:
      common_ubuntu_deps: curl doxygen libssl-dev libsystemd-dev pkg-config zlib1g-dev zip

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macOS-11
            name: macOS x86_64
            arch: x86_64
            toolchain: default.cmake

          - os: macOS-11
            name: macOS arm64
            arch: arm64
            toolchain: macOS-arm64.cmake

          - os: windows-latest
            name: Windows x86_64
            arch: x86_64

          - os: windows-2019
            name: Windows arm64
            toolchain: Windows-arm64-msvc.cmake
            cmake_opts: -A ARM64
            arch: arm64

          - os: ubuntu-20.04
            container: ubuntu:18.04
            name: Linux x86_64
            install: $common_ubuntu_deps build-essential
            toolchain: default.cmake
            cmake_opts: -DUSE_OPENSSL=ON
            arch: x86_64

          - os: ubuntu-20.04
            container: ubuntu:18.04
            name: Linux arm
            install: $common_ubuntu_deps crossbuild-essential-armhf
            toolchain: Linux-arm.cmake
            cmake_opts: -DCMAKE_BUILD_TYPE=Release -DUSE_OPENSSL=ON
            arch: arm

          - os: ubuntu-20.04
            container: ubuntu:18.04
            name: Linux arm64
            install: $common_ubuntu_deps crossbuild-essential-arm64
            toolchain: Linux-arm64.cmake
            cmake_opts: -DCMAKE_BUILD_TYPE=Release -DUSE_OPENSSL=ON
            arch: arm64

    steps:
      - name: install tools
        if: ${{ matrix.install != null }}
        run: |
          apt -y update
          apt -y install ${{ matrix.install }}

      - name: install contemporary git
        if: ${{ matrix.container != null }}
        run: |
          apt -y update
          apt -y install software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          apt -y update
          apt -y install git
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git --version

      # run this step if Linux and arm or arm64 
      - name: subscribe to apt multiarch ports and install libssl-dev for target arch
        if: ${{ matrix.container != null && matrix.arch != 'x86_64' }}
        run: |
          case ${{ matrix.arch }} in
            arm)   TARGETARCH=armhf;;
            arm64) TARGETARCH=arm64;;
          esac
          dpkg --add-architecture ${TARGETARCH}
          cat <<EOF > /etc/apt/sources.list.d/crossbuild.list
          deb [arch=${TARGETARCH}] http://ports.ubuntu.com/ bionic main restricted
          deb [arch=${TARGETARCH}] http://ports.ubuntu.com/ bionic-updates main restricted
          deb [arch=${TARGETARCH}] http://ports.ubuntu.com/ bionic universe
          deb [arch=${TARGETARCH}] http://ports.ubuntu.com/ bionic-updates universe
          deb [arch=${TARGETARCH}] http://ports.ubuntu.com/ bionic multiverse
          deb [arch=${TARGETARCH}] http://ports.ubuntu.com/ bionic-updates multiverse
          deb [arch=${TARGETARCH}] http://ports.ubuntu.com/ bionic-backports main restricted universe multiverse
          EOF
          sed -Ei 's/^deb/deb [arch=amd64]/g' /etc/apt/sources.list
          apt-get update
          apt-get -y install libssl-dev:${TARGETARCH}

      - name: install contemporary cmake
        if: ${{ matrix.container != null }}
        uses: lukka/get-cmake@latest

      - name: Add msbuild to PATH
        if: matrix.os == 'windows-2019'
        uses: microsoft/setup-msbuild@v1.1

      - name: checkout workspace
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: make build dir
        run: cmake -E make_directory ./build

      - name: configure cmake
        env:
          TOOLCHAIN: ${{ matrix.toolchain && format('./toolchains/{0}', matrix.toolchain) || '' }}
        run: cmake ${{matrix.cmake_opts}} -DCMAKE_TOOLCHAIN_FILE="${{ env.TOOLCHAIN_FILE }}" -S . -B ./build

      - name: build ziti-edge-tunnel bundle target
        run: cmake --build ./build --target bundle --verbose

      - name: list bundle artifacts
        run: ls -R
        working-directory: ./build/bundle/

      - name: list program artifacts
        run: ls -R
        working-directory: ./build/programs/ziti-edge-tunnel/

      - name: upload bundle artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: |
            ./build/bundle/ziti-edge-tunnel-*.zip
            !./build/bundle/ziti-edge-tunnel-test-*.zip
          if-no-files-found: error
