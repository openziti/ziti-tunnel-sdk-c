name: CMake build
description: CMake Composite Action

inputs:
  preset:
    required: true
    description: vcpkg build preset, e.g, windows-arm64

  config:
    default: RelWithDebInfo
    description: build type

  target:
    default: bundle
    description: cmake build target

  test_id:
    description: Ziti Test Identity

runs:
  using: "composite"
  steps:
    - name: macOS tools
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install autoconf autoconf-archive automake pkg-config md5sha1sum

    - name: simple build
      run: echo "preset = ${{ inputs.preset }}"
      shell: bash

    - name: install contemporary cmake
      if: runner.os != 'Linux'
      uses: lukka/get-cmake@v3.27.7 # pin version to avoid failed glibc dependency on ubuntu 20 runners. go back to @latest when ubuntu 22+ is adopted for runner os.

    - uses: lukka/run-vcpkg@v11
      if: runner.os != 'Linux'
      with:
        # get baseline from vcpkg
        vcpkgJsonGlob: './vcpkg.json'

    - name: get vcpkg cache key
      id: get_vcpkg_cache_key
      shell: bash
      env:
        DISTRO_LABEL: ${{ format('{0}-{1}', matrix.distro.name, matrix.distro.version) }}
        KEY_PREFIX: vcpkg_cache-cmake-${{ inputs.preset }}
      run: |
        common_key="${KEY_PREFIX}-vcpkg_json_md5=$(md5sum ./vcpkg.json | awk '{ print $1 }')"
        if [ "${RUNNER_OS}" != "Linux" ]; then
          echo "key=${common_key}-ImageVersion=${ImageVersion}" | tee -a $GITHUB_OUTPUT      
        else
          # ImageVersion is irrelevant since the build action runs in a container
          # Express the vcpkg overlays, dockerfile, and entry point that the action will use as a single hash
          build_action_hash="$(find ./.github/actions/openziti-tunnel-build-action/gh-release -type f -print | xargs md5sum | awk '{ print $1 }' | sort | md5sum | awk '{ print $1 }')"
          echo "key=${common_key}-build_action_md5=${build_action_hash}" | tee -a $GITHUB_OUTPUT
        fi

    - uses: actions/cache@v4
      with:
        key: ${{ steps.get_vcpkg_cache_key.outputs.key }}
        path: ./vcpkg_cache

    - uses: lukka/run-cmake@v10.6 # pin version to avoid failed glibc dependency on ubuntu 20 runners. go back to @latest when ubuntu 22+ is adopted for runner os.
      if: runner.os != 'Linux'
      name: Configure CMake
      with:
        configurePreset: ci-${{ inputs.preset }}
        configurePresetAdditionalArgs: "[ `-B`, `./build` ]"

    - name: build ziti-edge-tunnel (non-linux)
      if: runner.os != 'Linux'
      shell: bash
      run: |
        cmake \
          --build ./build \
          --config ${{ inputs.config }} \
          --target ${{ inputs.target }} \
          --verbose

    - name: configure build action for github release binaries
      if: runner.os == 'Linux'
      shell: bash
      run: |
        cp -vr ./.github/actions/openziti-tunnel-build-action/gh-release/* ./.github/actions/openziti-tunnel-build-action/

    - name: build ziti-edge-tunnel (linux)
      if: runner.os == 'Linux'
      uses: ./.github/actions/openziti-tunnel-build-action
      env:
        # map vcpkg cache so container uses the same directory as the rest of the workflow
        "VCPKG_BINARY_SOURCES": "clear;files,/github/workspace/vcpkg_cache,readwrite"
      with:
        arch: ci-${{ inputs.preset }}
        config: ${{ inputs.config }}
