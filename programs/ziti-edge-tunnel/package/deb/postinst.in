# always place a symlink to the installed executable in /usr/bin
ln -sfn @CPACK_BIN_DIR@/@CPACK_PACKAGE_NAME@ /usr/bin/@CPACK_PACKAGE_NAME@

# copy the unit file to the systemd unit directory as a regular file; buffer stderr together with stdout to avoid
# confusing output line order where stderr appears after subsequent command's stdout; this also seems to influence order
# of operations in an important way because, when stdout and stderr are buffered independently, the install command
# always reports an error as if the subsequent ln command had already succeeded: "install:
# '/opt/openziti/share/ziti-edge-tunnel.service' and '/lib/systemd/system/ziti-edge-tunnel.service' are the same file"
install -m 644 @CPACK_SHARE_DIR@/@SYSTEMD_UNIT_FILE_NAME@ @SYSTEMD_UNIT_DIR@/@SYSTEMD_UNIT_FILE_NAME@ 2>&1

# delete the old copy of the unit file to reduce confusion; this has the downside of an error during dpkg remove
# operation because this file was specified to be installed with this package and no longer exists; modifying the file
# with an explanation or warning or link is an alternative to removing it, but it would only work for this deb, not the
# rpm, artifact of this build because rpm creates unwanted *.rpmsave backups of files that were modified after the
# specified version was installed
if [ -e @CPACK_SHARE_DIR@/@SYSTEMD_UNIT_FILE_NAME@ ]; then
    unlink @CPACK_SHARE_DIR@/@SYSTEMD_UNIT_FILE_NAME@
fi


# Source debconf library.
. /usr/share/debconf/confmodule

# ensure user `ziti' exists if install or upgrade
if [ "$1" = "configure" ]; then
  # create user / group
  # systemd-sysusers isn't on xenial, possibly others? test and fall back to useradd as a last ditch
  # systemd-sysusers on ubuntu 18 (systemd v237) doesn't recognize `--replace`
  if command -v systemd-sysusers > /dev/null 2>&1 &&
     test $(systemd-sysusers --version | awk '/^systemd / { print $2}') -gt 237; then
    echo 'u ziti - "openziti user" "/var/lib/ziti"' | \
      systemd-sysusers --replace=/usr/lib/sysusers.d/ziti-edge-tunnel.conf -
  else
    if ! getent group ziti > /dev/null 2>&1; then
      groupadd --system ziti
    fi
    if ! getent passwd ziti > /dev/null 2>&1; then
      useradd --system --home-dir=/var/lib/ziti --shell /usr/sbin/nologin --comment "openziti user" -g ziti --no-user-group ziti
    fi
  fi

  # update permissions
  chown -R ziti:ziti "@ZITI_STATE_DIR@"
  chmod -R u=rwX,g=rwX,o= "@ZITI_STATE_DIR@"

  chown root:ziti "@ZITI_IDENTITY_DIR@"
  chmod 0770 "@ZITI_IDENTITY_DIR@"
  find "@ZITI_IDENTITY_DIR@" -maxdepth 1 -name "*.json" -type f -exec chown ziti:ziti "{}" + -exec chmod 0440 "{}" +

  # sort ascending the installed and max policykit versions, saving the highest version, so we
  # can ensure the installed version is less than the max version
  policykit_version="$(dpkg-query -Wf '${Version}' policykit-1)"
  max_policykit_version="0.106"
  highest_policykit_version="$(printf '%s\n' ${policykit_version} ${max_policykit_version} | sort -V | tail -n1)"

  # sort ascending the installed and min systemd versions, saving the lowest version, so we can ensure the installed
  # version is greater than or equal to the min version
  systemd_version=$(dpkg-query -Wf '${Version}' systemd)
  min_systemd_version="243"
  lowest_systemd_version="$(printf '%s\n' ${systemd_version} ${min_systemd_version} | sort -V | head -n1)"

  # install PolicyKit policy if < v0.106 (https://askubuntu.com/questions/1287924/whats-going-on-with-policykit)
  if [ ${policykit_version} != ${max_policykit_version} ] && [ ${max_policykit_version} = ${highest_policykit_version} ]; then
    # run as root unless systemd >= v243 (required set-llmnr introduced v243 https://github.com/systemd/systemd/commit/52aaef0f5dc81b9a08d720f551eac53ac88aa596)
    if [ ${systemd_version} = ${min_systemd_version} ] || [ ${min_systemd_version} = ${lowest_systemd_version} ]; then
      cp "@CPACK_SHARE_DIR@/@ZITI_POLKIT_PKLA_FILE@.sample" "/var/lib/polkit-1/localauthority/10-vendor.d/@ZITI_POLKIT_PKLA_FILE@"
      db_set ziti_edge_tunnel/install_pkla true
    else
      service_user=root
      override_dir="@SYSTEMD_UNIT_DIR@/@SYSTEMD_UNIT_FILE_NAME@.d"
      mkdir -p "${override_dir}/"
      ( echo '[Service]'; echo "User=root" ) > "${override_dir}/10-run-as-root.conf"
    fi
  fi

  # remove socket files that were created by older ziti-edge-tunnel versions
  rm -f /tmp/ziti-edge-tunnel.sock /tmp/ziti-edge-tunnel-event.sock
fi

# Copied from https://github.com/Debian/debhelper/blob/master/autoscripts/postinst-systemd-dont-enable
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
    if deb-systemd-helper debian-installed @SYSTEMD_UNIT_FILE_NAME@; then
        # This will only remove masks created by d-s-h on package removal.
        deb-systemd-helper unmask @SYSTEMD_UNIT_FILE_NAME@ >/dev/null || true

        if deb-systemd-helper --quiet was-enabled @SYSTEMD_UNIT_FILE_NAME@; then
            # Create new symlinks, if any.
            deb-systemd-helper enable @SYSTEMD_UNIT_FILE_NAME@ >/dev/null || true
        fi
    fi

    # Update the statefile to add new symlinks (if any), which need to be cleaned
    # up on purge. Also remove old symlinks.
    deb-systemd-helper update-state @SYSTEMD_UNIT_FILE_NAME@ >/dev/null || true
fi
# End copied section

# Copied from https://github.com/Debian/debhelper/blob/master/autoscripts/postinst-systemd-restartnostart
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
    if [ -d /run/systemd/system ]; then
        systemctl --system daemon-reload >/dev/null || true
        # TODO: Handle service restart
        # if [ -n "$2" ]; then
        #     deb-systemd-invoke try-restart @SYSTEMD_UNIT_FILE_NAME@ >/dev/null || true
        # fi
    fi
fi
# End copied section

if [ "$1" = "configure" ]; then
    # if interactive and stdin is a tty
    if [ "$DEBIAN_FRONTEND" != "noninteractive" -a -t 0 ]; then
      ssize=$(tput cols)
    else
      ssize=80
    fi
    printf '\n'
    printf %"$ssize"s | tr " " "-"
    echo "@SYSTEMD_SERVICE_NAME@ was installed..."
    if [ "${service_user}" = "root" ]; then
      echo "@SYSTEMD_SERVICE_NAME@ will run as root, since policykit cannot be configured to authorize set-llmnr on this system".
    fi
    echo "First install an OpenZiti identity or enroll token in: @ZITI_IDENTITY_DIR@"
    echo "then start or restart this systemd service unit."
    printf %"$ssize"s | tr " " "-"
    printf '\n'
fi
